import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCityWeather, fetchMultipleCitiesWeather, fetchCityForecastByCoord } from './weatherApi';
import { getCurrentDate, getCurrentTime } from '../../helpers/dateUtils';

const initialState = {
  mainCityState: {
      name: 'London',
      countryCode: 'GB',
      date: getCurrentDate(),
      weatherStatus: '-',
      temp: '-',
      lon: '',
      lat: '',
      hourlyForecast:[]
  },
  otherCities: [
    {
        id: 1,
        name: 'Rome',
        countryCode: 'IT',
        date: getCurrentDate(),
        weatherStatus: '-',
        temp: '-',
        time: getCurrentTime()
    },
    {
        id: 2,
        name: 'Venice',
        countryCode: 'IT',
        date: getCurrentDate(),
        weatherStatus: '-',
        temp: '-',
        time: getCurrentTime()
    }
  ],
  status: 'idle'
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchMainCityData({citiName: 'London', countryCode: 'GB'}))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchMainCityData = createAsyncThunk(
  'weather/fetchDataMainCity',
  async (callData) => {
    let response = await fetchCityWeather(callData.cityName, callData.countryCode);
    let forecastResponse = await fetchCityForecastByCoord(response.coord.lat, response.coord.lon);
    
    response = {
      ...response,
      forecastList: forecastResponse
    };
    console.log('Returned data: ', response);

    return response;
  }
);

/* export const fetchMainCityHourlyForecast = createAsyncThunk(
  'weather/fetchDataForecastMainCity',
  async (callData) => {
    const response = await fetchMainCityHourlyForecast(callData.lat, callData.lon);

    return response;
  }
) */

export const fetchOtherCitiesData = createAsyncThunk(
    'weather/fetchDataOtherCities',
    async (data, thunkAPI) => {
        let currentState = thunkAPI.getState();
        const response = await fetchMultipleCitiesWeather(currentState.weather.otherCities.map(item => { return { name: item.name, countryCode: item.countryCode } })); 
        return response;
    }
)

export const weatherSlice = createSlice({
  name: 'weather',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
    .addCase(fetchMainCityData.pending, (state) => {
        state.status = 'loading';
    })
    .addCase(fetchMainCityData.fulfilled, (state, action) => {
        state.status = 'idle';
        state.mainCityState.weatherStatus = action.payload.weather[0].main;
        state.mainCityState.temp = action.payload.main.temp;
        state.mainCityState.lon = action.payload.coord.lon;
        state.mainCityState.lat = action.payload.coord.lat;
        state.mainCityState.hourlyForecast = action.payload.forecastList;
    });

    builder
    .addCase(fetchOtherCitiesData.pending, state => {
        state.status = 'loading';
    })
    .addCase(fetchOtherCitiesData.fulfilled, (state, action) => {
        state.status = 'idle';
        action.payload.forEach(cityItem => {
            let cityIndex = state.otherCities.findIndex(city => city.name === cityItem.name);
            if(!state.otherCities[cityIndex]) return;

            state.otherCities[cityIndex] = {
                ...state.otherCities[cityIndex],
                weatherStatus: cityItem.weather[0].main,
                temp: cityItem.main.temp,
                date: getCurrentDate(),
                time: getCurrentTime()
            }
        })
    });
    
  },
});

/* export const {  } = weatherSlice.actions; */

export const selectMainCity = (state) => state.mainCityState;


export default weatherSlice.reducer;
